#!/usr/bin/python
# -*- coding: utf-8 -*-

#===========================================#
#                                           #
#                                           #
#      Project Euler : probleme 12          #
#                                           #
#                                           #
#===========================================#                                           



# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?


from nombres_premiers import *





def euler_12():
	""" unit -> int : trouve la valeur du premier nombre triangulaire avec plus de 500 diviseurs """
	n = 1
	while (nb_diviseur(n*(n+1)/2) < 500): # L'acces a traingulaire_dict se fait en temps constant
		n +=1
	return(n*(n+1)/2,n)







def main():
	print(euler_12())











#===========================#
#                           #
#         Tests             #
#                           #
#===========================#

if __name__ == '__main__':
	main()

